<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Robin's Blog]]></title>
  <subtitle><![CDATA[What pains us trains us]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-09-27T16:30:22.755Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Robin]]></name>
    <email><![CDATA[robin_1966@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IoC与DI学习]]></title>
    <link href="http://yoursite.com/2014/09/27/IOC%E4%B8%8EDI%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2014/09/27/IOC与DI学习/</id>
    <published>2014-09-27T12:39:46.000Z</published>
    <updated>2014-09-27T14:26:27.000Z</updated>
    <content type="html"><![CDATA[<p>IoC, Inversion of Control，控制反转， 控制权从应用程序转移到IoC容器（如Spring）<br>IoC是一种通用的设计原则，而DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC的设计原则。DI是IoC典型的实现。IoC与DI的关系就好比Java中的”接口”和”接口的实现类”的关系一样。目前有四种DI实现：setter注入、构造器注入、接口注入和静态工厂注入，其中后两种应用较少。</p>
<h3 id="1-_setter注入">1. setter注入</h3>
<p>首先有个类叫Cat，有个AnimalAction的逻辑类。</p>
<p>Cat类如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Cat {
    <span class="keyword">private</span> String msg;

    <span class="comment">//依赖注入时必须的setter方法</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span>(String msg){
        <span class="keyword">this</span>.msg = msg;
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span>(){
        System.<span class="keyword">out</span>.println(msg + <span class="string">"，喵~喵~"</span>);
    }
}
</code></pre><p>AnimalAction类如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> AnimalAction {
    <span class="keyword">private</span> Animal animal;

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animalSayHello</span>() {
        animal.sayHello();
    }

    <span class="comment">//依赖注入时必须的setter方法</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span>(Animal animal) {
        <span class="keyword">this</span>.animal = animal;
    }
}
</code></pre><p>Spring-beans.xml配置如下：</p>
<pre><code>&lt;beans&gt;
    &lt;bean id=<span class="string">"cat"</span> class=<span class="string">"com.tw.hello.spring.Cat"</span>&gt;
        &lt;property name=<span class="string">"msg"</span> value=<span class="string">"猫猫"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean id=<span class="string">"animalAction"</span> class=<span class="string">"com.tw.hello.spring.AnimalAction"</span>&gt;
        &lt;property name=<span class="string">"cat"</span> <span class="keyword">ref</span>=<span class="string">"cat"</span>&gt;&lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h3 id="2-_构造器注入">2. 构造器注入</h3>
<p>构造器注入的话，必须要在AnimalAction中加入有参构造方法。</p>
<p>Spring-beans.xml配置如下：</p>
<pre><code> &lt;beans&gt;
        &lt;bean id=<span class="string">"cat"</span> class=<span class="string">"com.tw.hello.spring.Cat"</span>&gt;
            &lt;property name=<span class="string">"msg"</span> value=<span class="string">"猫猫"</span> /&gt;
        &lt;/bean&gt;

        &lt;bean id=<span class="string">"animalAction"</span> class=<span class="string">"com.tw.hello.spring.AnimalAction"</span>&gt;
            &lt;constructor-arg index=<span class="string">"0"</span> <span class="keyword">ref</span>=<span class="string">"cat"</span>&gt;&lt;/constructor-arg&gt;
        &lt;/bean&gt;
 &lt;/beans&gt;
</code></pre><h3 id="3-_接口注入">3. 接口注入</h3>
<h3 id="4-_静态工厂注入">4. 静态工厂注入</h3>
<h3 id="5-_Annotation方式">5. Annotation方式</h3>
<p>主要是用@Component和@Autowired来代替bean配置，只需要在入口XML文件中加入以下，便可以自动扫描注解。</p>
<pre><code>&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"com.thoughtworks.bookshelf"</span>/&gt;
&lt;<span class="keyword">context</span>:annotation-config/&gt;
</code></pre><p>其本质还是setter注入和构造器注入两种方式，如果在AnimalAction中，@Autowired放在字段上，就是setter注入；如果@Autowired放在构造方法上，则是构造器方式注入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>IoC, Inversion of Control，控制反转， 控制权从应用程序转移到IoC容器（如Spring）<br>IoC是一种通用的设计原则，而DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC的设计原则。DI是IoC典型的]]>
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring MVC+Hiberante环境搭建]]></title>
    <link href="http://yoursite.com/2014/09/21/Spring-MVC-Hiberante%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2014/09/21/Spring-MVC-Hiberante环境搭建/</id>
    <published>2014-09-21T11:02:39.000Z</published>
    <updated>2014-09-27T16:22:25.000Z</updated>
    <content type="html"><![CDATA[<p>最近将学习了<a href="http://hibernate.org/" target="_blank" rel="external">Hibernate</a>，并将Hibernate集成到Spring MVC之中，并替换原有的JDBC，遇到了很多问题，在此记录一下。</p>
<h3 id="一、添加相应的架包">一、添加相应的架包</h3>
<p>我的项目是采用Gradle进行管理的，具体架包主要应包括:</p>
<ol>
<li>org.springframework:spring-orm:4.0.6.RELEASE  &nbsp;&nbsp;<em>#主要包含LocalSessionFactoryBean，用于产生sessionFactory</em></li>
<li>org.springframework:spring-test:4.0.0.RELEASE &nbsp;&nbsp;<em>#主要在测试中能配置ContextConfiguration的入口文件</em></li>
<li>org.hibernate:hibernate-core:4.3.6.Final  &nbsp;&nbsp;<em>#主要包含了Hibernate核心类库</em></li>
<li>org.hibernate:hibernate-annotations:3.5.6-Final &nbsp;&nbsp;<em>#主要包含了Hibernate注解类库</em></li>
<li>org.hibernate:hibernate-c3p0:4.3.6.Final &nbsp;&nbsp;<em>#主要包含数据库连接池的类库</em></li>
<li>org.slf4j:slf4j-api:1.7.5 &nbsp;&nbsp;<em>#主要打印输出日志服务，我当时以为没用，没添加它，就一直报slf4j的架包错误</em></li>
</ol>
<h3 id="二、配置Hibernate相关的XML配置文件">二、配置Hibernate相关的XML配置文件</h3>
<h4 id="1-_配置database-properties">1. 配置database.properties</h4>
<p>这里主要配置数据库连接池的参数，其中数据库我配有两个，一个用于开发，一个用于测试的。具体配置如下:</p>
<pre><code>hibernate.<span class="variable">dialect=</span>org.hibernate.dialect.MySQLDialect
<span class="variable">driverClassName=</span>com.mysql.jdbc.Driver
<span class="variable">validationQuery=</span>SELECT <span class="number">1</span>
<span class="variable">url=</span>jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/bookshelf?<span class="variable">useUnicode=</span><span class="constant">true</span>&amp;<span class="variable">characterEncoding=</span>UTF-<span class="number">8</span>
<span class="variable">url_test=</span>jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/bookshelf_test?<span class="variable">useUnicode=</span><span class="constant">true</span>&amp;<span class="variable">characterEncoding=</span>UTF-<span class="number">8</span>
<span class="variable">username=</span>root
<span class="variable">password=</span>
hibernate.hbm2ddl.<span class="variable">auto=</span>update
hibernate.<span class="variable">show_sql=</span><span class="constant">true</span>
hibernate.<span class="variable">format_sql=</span><span class="constant">true</span>
</code></pre><p>其中hibernate.hbm2ddl.auto=update配置，如果代码Object属性，类型和长度等有更新，执行过程中，数据库会对应自动更新，这样就不用再去更改对应数据表了。</p>
<h4 id="2-_配置Hibernate-config-xml">2. 配置Hibernate-config.xml</h4>
<p>主要配置dataSource、sessionFactory、txManager，还有自动扫描、注解配置等。</p>
<pre><code><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.thoughtworks.bookshelf"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span>
<span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:database.properties"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>
      <span class="attribute">destroy-method</span>=<span class="value">"close"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span> <span class="attribute">value</span>=<span class="value">"${driverClassName}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span> <span class="attribute">value</span>=<span class="value">"${url_test}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">value</span>=<span class="value">"${username}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${password}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span> <span class="attribute">value</span>=<span class="value">"40"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minPoolSize"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialPoolSize"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxIdleTime"</span> <span class="attribute">value</span>=<span class="value">"20"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"hibernateProperties"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">props</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.hbm2ddl.auto"</span>&gt;</span>${hibernate.hbm2ddl.auto}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.dialect"</span>&gt;</span>${hibernate.dialect}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.show_sql"</span>&gt;</span>${hibernate.show_sql}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.format_sql"</span>&gt;</span>${hibernate.format_sql}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">props</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>

    <span class="comment">&lt;!-- 注解方式配置 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"packagesToScan"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>com.thoughtworks.bookshelf.model<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">name</span>=<span class="value">"txManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">tx:annotation-driven</span> <span class="attribute">transaction-manager</span>=<span class="value">"txManager"</span>/&gt;</span>
</code></pre><p>其中注意</p>
<ol>
<li><code>&lt;context:component-scan base-package=&quot;com.thoughtworks.bookshelf&quot;/&gt;
 &lt;context:annotation-config/&gt;</code>不可缺少，这个是扫描注解的。</li>
<li><code>&lt;property name=&quot;packagesToScan&quot;&gt;&lt;/property&gt;</code>中间应是包名，我当时写成了<code>com.thoughtworks.bookshelf.model.*</code>就报找不到对应实体的错误。</li>
<li>该配置文件，对于Web app应该是在配置Spring MVC的配置文件中导入，否则会找不到Bean，无法加载sessionFactory，dataSource等，具体如<code>&lt;import resource=&quot;hibernate-config.xml&quot;&gt;&lt;/import&gt;</code>,等类似的代码； 如果是Junit测试，应该在测试文件上头配置<code>@ContextConfiguration(locations = {&quot;classpath:hibernate-test.xml&quot;})</code>, 具体参见<strong>第五部分</strong>。因此最好这个配置文件一式两份，一个配置的是开发的数据库，和Spring MVC配置文件在一起，另一个配置测试数据库，放在Source目录下。</li>
</ol>
<h3 id="三、修改实体类">三、修改实体类</h3>
<p>这里主要有@Entity @Table @Id @GeneratedValue @Column等注解。其中Obeject上的注解@Table是与数据库中的某表对应的，默认名字相同，如果不同则要在注明，如<code>@Table(name = &quot;book&quot;)</code>; 属性上的注解@Column是于表中的字段对应，同理，如果名字不同则要<code>@Column(name = &quot;title&quot;, length = 200)</code>; @Id是指主键; @GeneratedValue是指该字段自动增长。</p>
<p>部分代码如下：</p>
<pre><code><span class="annotation">@Entity</span>
<span class="annotation">@Table</span>(name = <span class="string">"book"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{
    <span class="annotation">@Id</span>
    <span class="annotation">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)
    <span class="keyword">private</span> <span class="keyword">int</span> id;

    <span class="annotation">@Column</span>(name = <span class="string">"title"</span>, length = <span class="number">200</span>)
    <span class="keyword">private</span> String title;
    <span class="annotation">@Column</span>(name = <span class="string">"author"</span>, length = <span class="number">100</span>)
    <span class="keyword">private</span> String author;

    #getter or setter方法……
}
</code></pre><h3 id="四、修改Dao文件">四、修改Dao文件</h3>
<p>部分代码如下：</p>
<pre><code>@Component
@Transactional  &amp;nbsp;&amp;nbsp;*<span class="preprocessor">#Spring事务管理，不必手动打开session，关闭session*</span>
<span class="keyword">public</span> <span class="keyword">class</span> BookDao {

    @Autowired &amp;nbsp;&amp;nbsp;*<span class="preprocessor">#自动加载sessionFactory bean，不必手动实例化*</span>
    <span class="keyword">private</span> SessionFactory sessionFactory;
    <span class="keyword">private</span> Session session;

    <span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBooks</span>(){
        session = sessionFactory.getCurrentSession();
        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();
        books = session.createCriteria(Book.class).list();
        <span class="keyword">return</span> books;
    }

    <span class="keyword">public</span> Book <span class="title">findBookById</span>(<span class="keyword">int</span> id){
           session = sessionFactory.getCurrentSession();
        <span class="keyword">return</span> (Book) session.<span class="keyword">get</span>(Book.class, id);
    }
}
</code></pre><h3 id="五、修改Dao的测试文件">五、修改Dao的测试文件</h3>
<p>Junit测试需要配置Hibernate配置文件入口</p>
<pre><code><span class="annotation">@RunWith</span>(SpringJUnit4ClassRunner.class)  &amp;nbsp;&amp;nbsp;*#用RunWith注解改变JUnit的默认执行类*
<span class="annotation">@ContextConfiguration</span>(locations = {<span class="string">"classpath:hibernate-test.xml"</span>}) &amp;nbsp;&amp;nbsp;*#配置在source下的Hibernate测试配置文件*
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoTest</span> </span>{
    <span class="annotation">@Autowired</span>
    <span class="keyword">private</span> BookDao bookDao;

    <span class="annotation">@Test</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFindAllBooks</span>() <span class="keyword">throws</span> Exception {
        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();

        books = (List&lt;Book&gt;) bookDao.findAllBooks();

        assertNotNull(books);
    }
}
</code></pre><h3 id="六、与原生JDBC比较">六、与原生JDBC比较</h3>
<p>这里还没有涉及到复杂的表之间的关联，和自己写HQL语句，只是Hibernate入门和基本配置。</p>
<p>目前最直观的体现如下:</p>
<ol>
<li>Hibernate封装了基本的CRUD的方法，开发效率大大提高。</li>
<li>Hibernate提供数据库事务管理，因此我们不必对手动关闭和释放数据库连接资源。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近将学习了<a href="http://hibernate.org/" target="_blank" rel="external">Hibernate</a>，并将Hibernate集成到Spring MVC之中，并替换原有的JDBC，遇到了很多问题，在此记录一下。<]]>
    </summary>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[终于有了个自建的博客了]]></title>
    <link href="http://yoursite.com/2014/09/21/%E7%BB%88%E4%BA%8E%E6%9C%89%E4%BA%86%E4%B8%AA%E8%87%AA%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86/"/>
    <id>http://yoursite.com/2014/09/21/终于有了个自建的博客了/</id>
    <published>2014-09-21T07:11:15.000Z</published>
    <updated>2014-09-27T14:27:07.000Z</updated>
    <content type="html"><![CDATA[<p>终于有了一个自建的博客，在此留下足迹，以作纪念。</p>
<p>这儿要感谢我的同事<a href="http://toozhao.com/" title="峻伟博客" target="_blank" rel="external">峻伟</a>，是他让我知道了<strong><em>Hexo</em></strong>的存在，也是他的督促让我有了这个博客的诞生；同时还要感谢<a href="http://zipperary.com/categories/hexo/" title="Zipper博客" target="_blank" rel="external">Zipper</a>, 虽然不认识他，但他的关于Hexo系列博客帮助我一步步搭建起了该博客。<br></p>
<p>仔细看了下俊伟的博客，居然有2006年的博客，天啦，他高一就开始写博客了，细细想来那会儿我刚接触网络，还是从申请QQ开始的，那会儿就会聊QQ，简单的看看网页。我算了算他的年龄，好像比我还小哎，哎呀真不敢比啊。Anyway，他就是我的目标啦，现目前我有三件大事：学技术、练英语、写博客。</p>
<p>再次说一下为什么要写博客，博客能给我带来什么，套用我的同事<a href="http://www.phodal.com/blog/write-driven-learning/" target="_blank" rel="external">峰达</a>的话，写作驱动学习啦。坚持写博客，我觉得有以下一些好处：</p>
<ol>
<li>一种很好的方式去总结自己的工作和学习。</li>
<li>促进自己更好的学习、思考、写作。</li>
<li>分享自己的知识和经验，获得更多成就感。</li>
<li>一个可以记录自己成长和进步的平台。</li>
<li>可以认识更多的人，也可以被发掘。</li>
</ol>
<p>希望这个博客能记录我成长的点滴，同时能让我对我的工作和学习做一些比较好的总结，以促进我的思考和写作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>终于有了一个自建的博客，在此留下足迹，以作纪念。</p>
<p>这儿要感谢我的同事<a href="http://toozhao.com/" title="峻伟博客" target="_blank" rel="external">峻伟</a>，是他让我知道了<strong>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[九月第2周工作学习总结]]></title>
    <link href="http://yoursite.com/2014/09/21/%E4%B9%9D%E6%9C%88%E7%AC%AC2%E5%91%A8%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2014/09/21/九月第2周工作学习总结/</id>
    <published>2014-09-21T05:04:47.000Z</published>
    <updated>2014-09-21T12:52:31.000Z</updated>
    <content type="html"><![CDATA[<p>一直很佩服坚持写博客，坚持做一件事的人，发现自己现在真的越来越缺乏耐心了，很多时候都比较急功近利。</p>
<p>写博客在我看来，现目前主要功用是一段时间学习的总结和整理，同时也是自己一点点进步的最好凭证。这种输出方式，可以更好地驱动自己定期整理和总结所思所学，同时这些记录下来的点滴和进步也会让自己产生成就感，驱动自己更多学习和更大进步。</p>
<p>大多时候喜欢将感兴趣和重要的东西放在有道笔记中，觉得这种方式更随意些，但就是缺乏阶段性的总结和整理，使得笔记有些乱了。所以这个博客就暂时定为每周一次，作为一周学习、工作的整理吧。</p>
<h2 id="工作上">工作上</h2>
<p>本周工作了四天，很快从中秋假期中调整了过来，很不错哟。前两天又是充满了各种会议，后两天被网络问题折磨。主要做了两件事，</p>
<p>一是, review了上周未完成的story（QSP Offer — purchase）的代码。Joyce和Nelson继续了后续的Sunpay部分free offer的显示。其中他们重构了我之前写的条件判断的代码，直接用else if搞定了，当时感觉他们错了，但测试又是对的。于是自己写了个成绩评判的小例子，终于真正弄明白了else if，然后就是醍醐灌顶，豁然开朗，看来我的Java基础啊。星期二还准备和峻伟pair cucumber的，于是自己看了Motor代码库的cucumber功能测试，请教了志恒，明白了如何跑该测试。不过下午开Tech Hudddle的时候，Nelson分配了任务，准备和Joyce pair 新卡。</p>
<p>二是, 和Nelson pair完成了QSP Offer — retrieve的Story，星期三上午开始分析，思考实现，下午和Nelson pair；星期四上午各种测试，发现Niche中的CampaignCd不能更改，于是下午继续和Nelson pair，因为 I4 Niche有问题，切换到了 S4 环境下完成功能。晚上又是各种测试没发现什么问题；星期五 I4 Niche好了，然后就在I4环境下测试，接着发现在retrieve old quote时候还有问题，于是debug，终于在中午找到了原因。星期三分析Story的时候，主要参考了Telematics的实现，刚开始还是比较迷糊，在峻伟的帮助下，细分了Task，就清晰了很多。下午和Nelson pair的时候大部分都听懂他说什么，也更有自信了，可是星期二开Tech Huddle的时候，就只是听到了些关键字，很多信息又missing了，幸亏峻伟下来跟我又确认了下。仔细想来Tech Huddle过程中刚开始还好，时间长了，信息量多了就累了，特别是中午想瞌睡；更重要的是有些时候我不知道会议上下文，比如当时讨论杰哥的Forty那个story时候，因为之前没有了解，就不知道他们在说什么，只是零星的关键字，而pair的时候，话题主要针对已经熟悉的story，还有就是Java和IDE的一些术语，所以大部分都听得懂。不管怎么样，说也好，听也罢，目前为止，最为有效的方法是提前做好准备，这样就能增强自信，知道讨论的内容，减少会议中反应和思考时间，从而不至于丢失信息。下午和Nelson pair的时候，还是有些担心的，虽然是第二次和Nelson pair了，但第一次主要是重构我自己做的东西，自己很熟悉，相对来说简单很多。这次幸亏提前和峻伟细分了task，而且参考了Telematics的实现，做了些工作。最后要约好第二天pair时间时候，有点急，脱口就说 “Maybe，我看”，惹得大家哄堂大笑，囧啊。峻伟还给了feedback，注意语气，比如用Could you give me the control?  而不是You can give me the control。第二天8：20没有赶到，很惭愧，以后要注意时间啊。晚上又做了些测试工作，发了封邮件将pair结束后自己额外做了的工作可见，并告知大家，得到了峻伟的表扬，很高兴，加油。星期五早上还跟Victor、Christian讨论了是否将story移到当前迭代中，是否做Shoulder Check问题。从做这个story过程中，学到了很多，最主要的是增强了自信和做一个story的大致流程。其实想来我们的story真的不难，做好分析，拆解好任务，参考类似功能基本就可以搞定的。</p>
<h2 id="学习上">学习上</h2>
<p>本周主要是实现了maven管理cucumber和用原生JDBC实现图书的CRUD功能。图书CRUD功能很简单，做了两天，当然那两天主要是集中于做stroy和它的测试了，晚上回去得晚。maven管理cucumber遇到了好多问题，首先是要将项目由gradle迁移到maven，必须添加想关依赖，遇到了很多问题，其中httpclient这个依赖总有错，折腾了很久才找到它，删了就好了。然后是cucumber中webDriver的依赖在maven中已加入，但架包始终无法导入，最终用gradle解决了这个问题。往往我做了很多工作，但最后就差一步，或许是小小的细节，比如测试中方法调错了，input类型button和submit不分，cucumber中没有验证最后结果，最后结果就大打折扣了。峻伟告诉我，不要自己死钻牛角尖，要学会思考，然后有目的的谷歌搜索，解决问题；同时要反思自己为什么总是卡在一些小问题上，我想主要是细心吧。</p>
<p>星期四的郑大晔校，柯翔主要结合项目谈测试工作，带着我们思考从哪些角度去做测试。测试不仅仅是检验功能是否满足AC，更重要的是跳出AC，发现其他潜在的问题和风险。</p>
<p>和勋荣过继承问题的时候，被他和凡鹏善于思考的习惯和品质震撼。一个功能，他们就能从不同角度，用不同实现去完成，并思考它们的实际使用价值。还有就是凡鹏的编程风格和代码规范真的做得很棒，很受启发。这种比较式的学习，的确能从别的小伙伴身上学到很多，有了对比，才能发现问题。</p>
<p>记得周四的时候，杰哥问了我郑大晔校的课程有什么问题没，啊，我好像好久没有问杰哥作业问题了。我和峻伟交流得到很多，但还要更主动些，特别是要充分利用身边的资源，如杰哥，志恒，勋荣。脸皮要厚，要问，还要有质量地问啊。</p>
<h2 id="总结">总结</h2>
<p>总之，这周感觉还不错的，慢慢地工作能独立完成了，技术也有了进步，也越来越有信心了。加油，不要辜负了峻伟的期望，还有就是要多总结，多思考，列好计划，注意时间管理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直很佩服坚持写博客，坚持做一件事的人，发现自己现在真的越来越缺乏耐心了，很多时候都比较急功近利。</p>
<p>写博客在我看来，现目前主要功用是一段时间学习的总结和整理，同时也是自己一点点进步的最好凭证。这种输出方式，可以更好地驱动自己定期整理和总结所思所学，同时这些记录]]>
    </summary>
    
      <category term="工作总结 ThoughtWorks" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-ThoughtWorks/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
</feed>
