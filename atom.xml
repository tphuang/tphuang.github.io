<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Robin's Blog]]></title>
  <subtitle><![CDATA[What pains us trains us]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tphuang.github.io/"/>
  <updated>2015-02-05T14:52:03.219Z</updated>
  <id>http://tphuang.github.io/</id>
  
  <author>
    <name><![CDATA[Robin]]></name>
    <email><![CDATA[robin_1966@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[mobi, azw, azw3, epub格式有什么区别]]></title>
    <link href="http://tphuang.github.io/2014/12/05/different-ebook-formats/"/>
    <id>http://tphuang.github.io/2014/12/05/different-ebook-formats/</id>
    <published>2014-12-05T14:11:58.000Z</published>
    <updated>2015-02-05T14:40:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/different-ebook-formats.png" alt=""></p>
<p>刚接触Kindle的小伙伴经常会被mobi、azw、azw3、epub等常见的几个格式搞的很凌乱，它们都有哪些区别呢？又各有什么优缺点呢？哪个好一些呢？</p>
<p>这几种电子书格式从本质上来说都是从HTML文档转换而来，大多数HTML标签和CSS样式表的特性它们都支持，它们之间的主要区别在于对排版及新特性的支持与否上，为了更方便清晰的理解，笔者将这几种格式分门别类地为各位小伙伴详细解释一下：</p>
<h2 id="什么是mobi、azw格式">什么是mobi、azw格式</h2>
<p>mobi和azw格式的推手主要是Amazon，这两种电子书格式的发展很大程度上依靠Amazon这个巨大的内容提供商及其电子书阅读器Kindle的流行普及。它们同属亚马逊的私有格式，没有本质的区别，可以简单的这样理解，mobi是比较老的一种格式，而azw只是mobi的另一种形式而已，也可以理解为mobi加了个壳，亚马逊利用它对电子书做<a href="(http://zh.wikipedia.org/zh/%E6%95%B0%E5%AD%97%E7%89%88%E6%9D%83%E7%AE%A1%E7%90%86">DRM</a>(数字版权管理)版权保护。</p>
<p>目前市面上的mobi文件大部分是来自两种途径：epub、pdf或者txt转换成的mobi，从Amazon商店流出来的mobi。前者没什么好说的，后者要么是Amazon官方制作，要么就是自出版作者通过KDP (Kindle Direct Publishing，作者可以绕过出版社直接在Amazon上发售电子书 )平台发布，通过KDP平台发布时，作者只需要上传Word文档，其他的事情也是Amazon官方来做，从而保证了，mobi文件的规范程度。</p>
<h2 id="什么是azw3格式">什么是azw3格式</h2>
<p>azw3是随着2011年Amazon推出Kindle Fire平板时一起推出的。它填补了Mobi对于复杂排版支持的缺陷，支持很多HTML5（目前尚不支持 HTML5 的视频和音频标签）和CSS3的语法，这就大大改善了原来mobi或azw内容排版上的一些缺陷，单纯从读者的角度来讲，是不输epub格式的。目前从Amazon购买的书，大部分已经是azw3格式了，而以前主流的mobi格式则越来越少，它正逐渐取代mobi成为Kindle电子书的主流格式。</p>
<h2 id="什么是epub格式">什么是epub格式</h2>
<p>下面是维基百科对epub的一段定义：</p>
<blockquote>
<p>EPUB（Electronic Publication的缩写，电子出版）是一种开放的电子图书标准，由国际数字出版论坛（IDPF）提出；文件的附文件名为.epub。</p>
</blockquote>
<p>epub格式对于复杂的排版，图表，公式等元素的兼容性比mobi格式好很多，在脚本，公式，矢量图形的支持方面也强过mobi格式，现阶段epub格式的优势体现在图文混排、图片嵌入字体等，未来可预测的优势是epub格式对于声音，影像等多媒体内容互动的支持上。</p>
<p>epub格式是开放标准，所以在开发工具上也会有更大的选择，像Sigil、Calibre、Jutoh等软件都可以让用户自助制作epub格式电子书，但因为良莠不齐的制作也导致一个问题：大量的epub文件其实是不符合标准，无法保证在所有支持epub的硬件和软件上都可以顺利阅读，这就和iOS系统和Android系统的区别有些相似。</p>
<h2 id="亚马逊为什么不采用开放标准的epub格式呢？">亚马逊为什么不采用开放标准的epub格式呢？</h2>
<p>为什么亚马逊不选择epub这种竞争对手（如Google、苹果）和图书馆普遍采用的标准电子书格式呢？亚马逊解释说他们的创新速度很快，采用它们自己的标准格式，能够将创新成果迅速结合到产品中去。例如，Whispersync技术（该技术通过无线接入互联网，将电子书阅读进度信息同步到各种阅读器上）以及字号放大缩小的技术。采用其他格式的电子书阅读器，以后也能把这些功能结合进来，但是，亚马逊在提高产品性能上动作十分迅速。采用自己的格式是非常有利的，因为不用等第三方格式跟进之后再动手。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/different-ebook-formats.png" alt=""></p>
<p>刚接触Kindle的小伙伴经常会被mobi、azw、azw3、epub等常见的几个格式搞的很凌乱，它们都有哪些区别呢？又各有什么优缺点呢？哪个好一些呢？</]]>
    </summary>
    
      <category term="电子书" scheme="http://tphuang.github.io/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
      <category term="杂七杂八" scheme="http://tphuang.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[High一下]]></title>
    <link href="http://tphuang.github.io/2014/11/22/have-a-high/"/>
    <id>http://tphuang.github.io/2014/11/22/have-a-high/</id>
    <published>2014-11-22T09:57:06.000Z</published>
    <updated>2015-02-05T10:22:10.000Z</updated>
    <content type="html"><![CDATA[<p>今天不经意间注意到了<a href="http://zipperary.com/2013/11/19/give-it-a-high/" target="_blank" rel="external">Zippera</a>博客右上角的「High一下」功能，玩心顿起，便连High了好几下。觉得特别有意思，于是想在我的博客也放上这个功能，其实实现起来还是很简单的。</p>
<p>对于 Hexo 用户，可以在themes/jacman/layout/_partial/目录下新建一个叫have_a_high.ejs的文件，将以下代码完全拷贝进去，代码块无须做任何修改。然后又在themes/jacman/layout/_partial/header.ejs中的<code>&lt;ul&gt;</code>标签内部，且在某个<code>&lt;li&gt;...&lt;/li&gt;</code>之后，加入 <code>&lt;%- partial(&#39;_partial/have_a_high&#39;) %&gt;</code>，这儿就是让导航上有并列的「High一下」菜单。</p>
<p>大家可以玩玩我博客右上角的「High一下」，特别好玩，当然你还可以更改have_a_high.ejs文件里的一些参数，如音乐啊，动画效果，持续时间之类的哦。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"High一下"</span> <span class="attribute">href</span>=<span class="value">'javascript:(function() {</span></span></div><div class="line">        function c() {</div><div class="line">            var e = document.createElement("link");</div><div class="line">            e.setAttribute("type", "text/css");</div><div class="line">            e.setAttribute("rel", "stylesheet");</div><div class="line">            e.setAttribute("href", f);</div><div class="line">            e.setAttribute("class", l);</div><div class="line">            document.body.appendChild(e)</div><div class="line">        }</div><div class="line"></div><div class="line">        function h() {</div><div class="line">            var e = document.getElementsByClassName(l);</div><div class="line">            for (var t = 0; t &lt; e.length; t++) {</div><div class="line">                document.body.removeChild(e[t])</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        function p() {</div><div class="line">            var e = document.createElement("div");</div><div class="line">            e.setAttribute("class", a);</div><div class="line">            document.body.appendChild(e);</div><div class="line">            setTimeout(function() {</div><div class="line">                document.body.removeChild(e)</div><div class="line">            }, 100)</div><div class="line">        }</div><div class="line"></div><div class="line">        function d(e) {</div><div class="line">            return {</div><div class="line">                height : e.offsetHeight,</div><div class="line">                width : e.offsetWidth</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        function v(i) {</div><div class="line">            var s = d(i);</div><div class="line">            return s.height &gt; e && s.height &lt; n && s.width &gt; t && s.width &lt; r</div><div class="line">        }</div><div class="line"></div><div class="line">        function m(e) {</div><div class="line">            var t = e;</div><div class="line">            var n = 0;</div><div class="line">            while (!!t) {</div><div class="line">                n += t.offsetTop;</div><div class="line">                t = t.offsetParent</div><div class="line">            }</div><div class="line">            return n</div><div class="line">        }</div><div class="line"></div><div class="line">        function g() {</div><div class="line">            var e = document.documentElement;</div><div class="line">            if (!!window.innerWidth) {</div><div class="line">                return window.innerHeight</div><div class="line">            } else if (e && !isNaN(e.clientHeight)) {</div><div class="line">                return e.clientHeight</div><div class="line">            }</div><div class="line">            return 0</div><div class="line">        }</div><div class="line"></div><div class="line">        function y() {</div><div class="line">            if (window.pageYOffset) {</div><div class="line">                return window.pageYOffset</div><div class="line">            }</div><div class="line">            return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</div><div class="line">        }</div><div class="line"></div><div class="line">        function E(e) {</div><div class="line">            var t = m(e);</div><div class="line">            return t &gt;= w && t &lt;= b + w</div><div class="line">        }</div><div class="line"></div><div class="line">        function S() {</div><div class="line">            var e = document.createElement("audio");</div><div class="line">            e.setAttribute("class", l);</div><div class="line">            e.src = i;</div><div class="line">            e.loop = false;</div><div class="line">            e.addEventListener("canplay", function() {</div><div class="line">                setTimeout(function() {</div><div class="line">                    x(k)</div><div class="line">                }, 500);</div><div class="line">                setTimeout(function() {</div><div class="line">                    N();</div><div class="line">                    p();</div><div class="line">                    for (var e = 0; e &lt; O.length; e++) {</div><div class="line">                        T(O[e])</div><div class="line">                    }</div><div class="line">                }, 15500)</div><div class="line">            }, true);</div><div class="line">            e.addEventListener("ended", function() {</div><div class="line">                N();</div><div class="line">                h()</div><div class="line">            }, true);</div><div class="line">            e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</div><div class="line">            document.body.appendChild(e);</div><div class="line">            e.play()</div><div class="line">        }</div><div class="line"></div><div class="line">        function x(e) {</div><div class="line">            e.className += " " + s + " " + o</div><div class="line">        }</div><div class="line"></div><div class="line">        function T(e) {</div><div class="line">            e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</div><div class="line">        }</div><div class="line"></div><div class="line">        function N() {</div><div class="line">            var e = document.getElementsByClassName(s);</div><div class="line">            var t = new RegExp("\\b" + s + "\\b");</div><div class="line">            for (var n = 0; n &lt; e.length; ) {</div><div class="line">                e[n].className = e[n].className.replace(t, "")</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        var e = 30;</div><div class="line">        var t = 30;</div><div class="line">        var n = 350;</div><div class="line">        var r = 350;</div><div class="line">        var i = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3";</div><div class="line">        var s = "mw-harlem_shake_me";</div><div class="line">        var o = "im_first";</div><div class="line">        var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</div><div class="line">        var a = "mw-strobe_light";</div><div class="line">        var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</div><div class="line">        var l = "mw_added_css";</div><div class="line">        var b = g();</div><div class="line">        var w = y();</div><div class="line">        var C = document.getElementsByTagName("*");</div><div class="line">        var k = null;</div><div class="line">        for (var L = 0; L &lt; C.length; L++) {</div><div class="line">            var A = C[L];</div><div class="line">            if (v(A)) {</div><div class="line">                if (E(A)) {</div><div class="line">                    k = A;</div><div class="line">                    break</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        if (A === null) {</div><div class="line">            console.warn("Could not find a node of the right size. Please try a different page.");</div><div class="line">            return</div><div class="line">        }</div><div class="line">        c();</div><div class="line">        S();</div><div class="line">        var O = [];</div><div class="line">        for (var L = 0; L &lt; C.length; L++) {</div><div class="line">            var A = C[L];</div><div class="line">            if (v(A)) {</div><div class="line">                O.push(A)</div><div class="line">            }</div><div class="line">        }</div><div class="line">    })() '&gt;High一下<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>今天不经意间注意到了<a href="http://zipperary.com/2013/11/19/give-it-a-high/" target="_blank" rel="external">Zippera</a>博客右上角的「High一下」功能，玩心顿起，便连Hig]]>
    </summary>
    
      <category term="Hexo" scheme="http://tphuang.github.io/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://tphuang.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给博客添加“Fork me on Github”丝带]]></title>
    <link href="http://tphuang.github.io/2014/11/20/add-Fork-me-on-Github-ribbon/"/>
    <id>http://tphuang.github.io/2014/11/20/add-Fork-me-on-Github-ribbon/</id>
    <published>2014-11-20T03:23:28.000Z</published>
    <updated>2015-02-05T05:00:33.000Z</updated>
    <content type="html"><![CDATA[<p>我们经常看到很多博客的左上角或者右上角有个“Fork me on Github”的丝带（ribbon），那么如何才能给自己的博客也添加一个类似的丝带呢？</p>
<p>网上的方法有很多，这里推荐一个非常好的博客<a href="https://aralbalkan.com/scribbles/fork-me-on-github-retina-ribbons/" target="_blank" rel="external">Fork me on GitHub Retina Ribbons</a>.这个网站不仅有很不同颜色样式的丝带，还提供了源码。比如：</p>
<p><div class="img-center" markdown="1"><br>    <img src="http://aral.github.com/fork-me-on-github-retina-ribbons/left-red@2x.png" alt=""> <img src="http://aral.github.com/fork-me-on-github-retina-ribbons/right-green@2x.png" alt=""><br></div><br>我的博客就选用了绿色的ribbon，将相应代码复制到Hexo正在使用的theme下layout/_partial/header.ejs中即可。比如我使用的<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">jacman theme</a>，那么将下面的代码（注意将you改为你自己的github上的注册名）粘贴到刚才的目录中，放置在最后即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"https://github.com/you"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">style</span>=<span class="value">"position: absolute; top: 0; right: 0; border: 0; width: 149px; height: 149px;"</span></span></div><div class="line">    <span class="attribute">src</span>=<span class="value">"http://aral.github.com/fork-me-on-github-retina-ribbons/right-green@2x.png"</span></div><div class="line">    <span class="attribute">alt</span>=<span class="value">"Fork me on GitHub"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>我们经常看到很多博客的左上角或者右上角有个“Fork me on Github”的丝带（ribbon），那么如何才能给自己的博客也添加一个类似的丝带呢？</p>
<p>网上的方法有很多，这里推荐一个非常好的博客<a href="https://aralbalkan.com/]]>
    </summary>
    
      <category term="GitHub" scheme="http://tphuang.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://tphuang.github.io/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://tphuang.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle分离单元测试和集成测试]]></title>
    <link href="http://tphuang.github.io/2014/10/08/separate-unit-tests-and-integration-tests-with-Gradle/"/>
    <id>http://tphuang.github.io/2014/10/08/separate-unit-tests-and-integration-tests-with-Gradle/</id>
    <published>2014-10-07T17:04:51.000Z</published>
    <updated>2015-02-05T04:41:10.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    <summary type="html">
    <![CDATA[]]>
    </summary>
    
      <category term="Gradle" scheme="http://tphuang.github.io/tags/Gradle/"/>
    
      <category term="Cucumber" scheme="http://tphuang.github.io/tags/Cucumber/"/>
    
      <category term="Integration" scheme="http://tphuang.github.io/tags/Integration/"/>
    
      <category term="持续集成" scheme="http://tphuang.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maven分离单元测试和集成测试]]></title>
    <link href="http://tphuang.github.io/2014/10/08/separate-unit-tests-and-intergration-tests-with-Maven/"/>
    <id>http://tphuang.github.io/2014/10/08/separate-unit-tests-and-intergration-tests-with-Maven/</id>
    <published>2014-10-07T16:50:18.000Z</published>
    <updated>2015-02-05T04:39:29.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    <summary type="html">
    <![CDATA[]]>
    </summary>
    
      <category term="Maven" scheme="http://tphuang.github.io/tags/Maven/"/>
    
      <category term="Cucumber" scheme="http://tphuang.github.io/tags/Cucumber/"/>
    
      <category term="Integration" scheme="http://tphuang.github.io/tags/Integration/"/>
    
      <category term="持续集成" scheme="http://tphuang.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maven 学习]]></title>
    <link href="http://tphuang.github.io/2014/10/07/maven-learning/"/>
    <id>http://tphuang.github.io/2014/10/07/maven-learning/</id>
    <published>2014-10-07T15:24:04.000Z</published>
    <updated>2015-02-05T04:40:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Maven简介">Maven简介</h2>
<p>Maven是一个项目管理和构建的自动化工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期 (Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件 (plugin)目标(goal)的逻辑。</p>
<p><em>推荐书籍：</em> 目前中文版对maven介绍比较全的书籍是<a href="http://pan.baidu.com/wap/link?uk=3761431046&amp;shareid=932733601&amp;third=4" target="_blank" rel="external">《Maven实战》</a></p>
<h2 id="核心概念">核心概念</h2>
<ul>
<li>POM (Project Object Model)</li>
<li>Maven 插件</li>
<li>Maven 生命周期</li>
<li>Maven 依赖管理</li>
<li>Maven 库</li>
<li>Maven Profiles</li>
</ul>
<h3 id="POM">POM</h3>
<p>一般，maven 的 archetype 插件建立了一个工程目录，其中有一个 Project Object Model(POM) 文件 pom.xml 。这个文件用于描述项目，配置插件和管理依赖关系。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">project</span>&gt;</span></div><div class="line">#该项目的坐标，其他项目可根据这个标识找到</div><div class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span>bookshelf<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>bookshelf<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="title">version</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="title">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">           	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">           	<span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="Maven_插件">Maven 插件</h3>
<p>当我们刚开始构建项目时，可以用<code>mvn archetype:generate</code> 命令来生成一个项目。那么这里的 <code>archetype:generate</code> 是什么意思呢？archetype 是一个插件的名字，generate是目标(goal)的名字。这个命令的意思是告诉 maven 执行 archetype 插件的 generate 目标。</p>
<p>一个目标是一个工作单元，而插件则是一个或者多个目标的集合。比如说Jar插件，Compiler插件，Surefire插件等。从看名字就能知道，Jar 插件包含建立Jar文件的目标， Compiler 插件包含编译源代码和单元测试代码的目标。Surefire 插件的话，则是运行单元测试。</p>
<p>所以，其实mvn 本身不会做太多的事情，它不知道怎么样编译或者怎么样打包。它把构建的任务交给插件去做。插件定义了常用的构建逻辑，并且能够被重复利用。</p>
<h3 id="Maven_生命周期">Maven 生命周期</h3>
<p>项目中，我们经常用到mvn install或者mvn test等等，这些命令就是Maven对构建(build)的过程进行了抽象和定义，这个过程被称为构建的生命周期（<strong>lifecycle</strong>）。生命周期由多个阶段(phase)组成,每个阶段(phase)会挂接一到多个goal。goal是maven里定义任务的最小单元，相当于ant里的target。</p>
<p>如果你没有对它进行任何的插件配置或者定制的话，那么mvn deploy 会依次执行默认生命周期中包括编译，测试，打包，部署阶段。<br>生命周期更多内容，请参考<a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="external">Introduction to the Build Lifecycle</a>，常见的生命周期如下：</p>
<ul>
<li>process-resources     #复制并处理资源文件，至目标目录，准备打包。</li>
<li>compile       #编译项目的源代码。</li>
<li>test          #使用合适的单元测试框架运行测试。</li>
<li>package      #接受编译好的代码，打包成可发布的格式，如 JAR。</li>
<li>install      #将包安装至本地仓库，以让其它项目依赖。</li>
<li>deploy       #将最终的包复制到远程的仓库，以让其它开发人员与项目共享</li>
</ul>
<h3 id="Maven_依赖管理">Maven 依赖管理</h3>
<p>maven 坐标能够确定一个项目。换句话说，我们可以用它来解决依赖关系。在 POM 中，依赖关系是在 dependencies 部分中定义的。<br>如例子中maven 不但会下载junit-4.11.jar，还下载了它的 POM 文件。这样 maven 就能检查 junit 的依赖关系，把它所需要的依赖也包括进来。</p>
<p>在 POM 的 dependencies 部分中，scope 决定了依赖关系的适用范围。我们的例子中 junit 的 scope 是 test，那么它只会在执行 compiler:testCompile and surefire:test 目标的时候才会被加到 classpath 中，在执行 compiler:compile 目标时是拿不到 junit 的。常见的scope如下：</p>
<ol>
<li>compile ，缺省值，适用于所有阶段，会随着项目一起发布。</li>
<li>provided ，类似 compile ，期望 JDK 、容器或使用者会提供这个依赖。如servlet.jar 。</li>
<li>runtime ，只在运行时使用，如 JDBC 驱动，适用运行和测试阶段。</li>
<li>test ，只在测试时使用，用于编译和运行测试代码。不会随项目发布。</li>
</ol>
<h3 id="Maven_库">Maven 库</h3>
<p>当第一次运行 maven 命令的时候，你需要 Internet 连接，因为它要从网上下载一些文件。那么它从哪里下载呢？它是从 maven 默认的远程库(<a href="http://search.maven.org/" target="_blank" rel="external">http://search.maven.org/</a>) 下载的。这个远程库有 maven 的核心插件和可供下载的 jar 文件。同时我们可以通过<a href="http://mvnrepository.com/" target="_blank" rel="external">Maven Repository</a>找到想要的架包和插件。<br>本地库是指 maven 下载了插件或者 jar 文件后存放在本地机器上的拷贝。在 Linux 上，它的位置在 ~/.m2/repository，在 Windows XP 上，在 C:\Documents and Settings\username.m2\repository ，在 Windows 7 上，在 C:\Users\username.m2\repository。当 maven 查找需要的 jar 文件时，它会先在本地库中寻找，只有在找不到的情况下，才会去远程库中找。</p>
<h3 id="Maven_Profiles">Maven Profiles</h3>
<p>Profiles是maven的一个很关键的术语：profile是用来定义一些在build lifecycle中使用的environmental variations，profile可以设置成在不同的环境下激活不同的profile（例如：不同的OS激活不同的profile，不同的JVM激活不同的profile，不同的dabase激活不同的profile，不同的开发环境如Dev、QA、CI、Staging、Production等等）。<br>    使用：当使用Maven命令打包的时候要指定你要使用哪一个profiles id来装配你的项目，命令如下mvn clean package -P development ，其中-p是指启用哪一个profiles id.具体参见三. Maven管理单元测试与功能测试</p>
<h2 id="Maven管理单元测试和集成测试">Maven管理单元测试和集成测试</h2>
<p>将会在下一篇博客中提到，详见：<a href="/2014/10/08/separate-unit-tests-and-intergration-tests-with-Maven/">Maven分离单元测试和集成测试</a></p>
<h2 id="Maven常用命令">Maven常用命令</h2>
<ol>
<li>编译源代码： mvn compile </li>
<li>编译测试代码：mvn test-compile    </li>
<li>运行测试：mvn test   </li>
<li>产生site：mvn site   </li>
<li>打包：mvn package   </li>
<li>在本地Repository中安装jar：mvn install </li>
<li>清除产生的项目：mvn clean   </li>
<li>生成eclipse项目：mvn eclipse:eclipse  </li>
<li>生成idea项目：mvn idea:idea  </li>
<li>组合使用goal命令，如只打包不测试：mvn -Dtest package   </li>
<li>编译测试的内容：mvn test-compile  </li>
<li>只打jar包: mvn jar:jar  </li>
<li>只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile<br>  ( -skipping 的灵活运用，当然也可以用于其他组合命令)  </li>
<li>清除eclipse的一些系统设置:mvn eclipse:clean</li>
<li>查看架包依赖关系：mvn dependency:tree   </li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Maven简介">Maven简介</h2>
<p>Maven是一个项目管理和构建的自动化工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期 (Project Lifecycle)，一个依赖管理系统(Depe]]>
    </summary>
    
      <category term="Maven" scheme="http://tphuang.github.io/tags/Maven/"/>
    
      <category term="持续集成" scheme="http://tphuang.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IoC与DI学习]]></title>
    <link href="http://tphuang.github.io/2014/09/27/IoC-vs-DI/"/>
    <id>http://tphuang.github.io/2014/09/27/IoC-vs-DI/</id>
    <published>2014-09-27T12:39:46.000Z</published>
    <updated>2015-02-05T04:35:25.000Z</updated>
    <content type="html"><![CDATA[<p>IoC, Inversion of Control，控制反转， 控制权从应用程序转移到IoC容器（如Spring）<br>IoC是一种通用的设计原则，而DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC的设计原则,DI是IoC典型的实现。<br>IoC与DI的关系就好比Java中的”接口”和”接口的实现类”的关系一样。目前有四种DI实现：setter注入、构造器注入、接口注入和静态工厂注入，其中后两种应用较少。</p>
<h2 id="setter注入">setter注入</h2>
<p>首先有个接口是Animal, Cat是Animal的实现类，有个AnimalAction的逻辑类。</p>
<p>Cat类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span>();</div><div class="line">    <span class="keyword">void</span> setMsg(String msg);</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>{</div><div class="line">    <span class="keyword">private</span> String msg;</div><div class="line">    <span class="comment">//依赖注入时必须的setter方法</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span>(String msg){</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    }</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span>(){</div><div class="line">        System.out.println(msg + <span class="string">"，喵~喵~"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>AnimalAction类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalAction</span> </span>{</div><div class="line">    <span class="keyword">private</span> Animal animal;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animalSayHello</span>() {</div><div class="line">        animal.sayHello();</div><div class="line">    }</div><div class="line">    <span class="comment">//setter注入时需要</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span>(Animal animal) {</div><div class="line">        <span class="keyword">this</span>.animal = animal;</div><div class="line">    }</div><div class="line">    <span class="comment">//构造器注入时需要</span></div><div class="line">    <span class="keyword">public</span> <span class="title">AnimalAction</span>(Animal animal) {</div><div class="line">        <span class="keyword">this</span>.animal = animal;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Spring-beans.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"animal"</span> <span class="attribute">class</span>=<span class="value">"com.tw.hello.spring.Cat"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"msg"</span> <span class="attribute">value</span>=<span class="value">"猫猫"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"animalAction"</span> <span class="attribute">class</span>=<span class="value">"com.tw.hello.spring.AnimalAction"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"animal"</span> <span class="attribute">ref</span>=<span class="value">"animal"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="构造器注入">构造器注入</h2>
<p>构造器注入的话，必须要在AnimalAction中加入有参构造方法。<br>Spring-beans.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">beans</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"animal"</span> <span class="attribute">class</span>=<span class="value">"com.tw.hello.spring.Cat"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"msg"</span> <span class="attribute">value</span>=<span class="value">"猫猫"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"animalAction"</span> <span class="attribute">class</span>=<span class="value">"com.tw.hello.spring.AnimalAction"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">index</span>=<span class="value">"0"</span> <span class="attribute">ref</span>=<span class="value">"animal"</span>&gt;</span><span class="tag">&lt;/<span class="title">constructor-arg</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="接口注入">接口注入</h2>
<p>在AnimalAction类中加入如下代码，并注释原来的setter注入和构造器注入方式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口注入</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animalSayHello</span>() {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        animal = (Animal) Class.forName(<span class="string">"com.tw.hello.spring.Cat"</span>).newInstance();</div><div class="line">        animal.sayHello();</div><div class="line">    } <span class="keyword">catch</span> (Exception e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="静态工厂注入">静态工厂注入</h2>
<p>此时我们再添加一个Anima的实现类Dog，类似于Cat</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>{</div><div class="line">    <span class="keyword">private</span> String msg;</div><div class="line">    <span class="comment">//依赖注入时必须的setter方法</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span>(String msg){</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    }</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span>(){</div><div class="line">        System.out.println(msg + <span class="string">"，旺~旺~"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>再添加AnimalFactory工厂，用于静态注入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>{</div><div class="line"><span class="comment">//    静态工厂设计模式</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">getAnimal</span>(String type) {</div><div class="line">        <span class="keyword">if</span> (<span class="string">"cat"</span>.equalsIgnoreCase(type)) {</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Cat();</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dog();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Annotation方式">Annotation方式</h2>
<p>主要是用@Component和@Autowired来代替bean配置，只需要在入口XML文件中加入以下，便可以自动扫描注解。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.thoughtworks.bookshelf"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span></div></pre></td></tr></table></figure>

<p>其本质还是setter注入和构造器注入两种方式，如果在AnimalAction中，@Autowired放在字段上，就是setter注入；如果@Autowired放在构造方法上，则是构造器方式注入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>IoC, Inversion of Control，控制反转， 控制权从应用程序转移到IoC容器（如Spring）<br>IoC是一种通用的设计原则，而DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC的设计原则,DI是IoC典型的]]>
    </summary>
    
      <category term="Spring" scheme="http://tphuang.github.io/tags/Spring/"/>
    
      <category term="IoC" scheme="http://tphuang.github.io/tags/IoC/"/>
    
      <category term="DI" scheme="http://tphuang.github.io/tags/DI/"/>
    
      <category term="Java" scheme="http://tphuang.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring MVC+Hiberante环境搭建]]></title>
    <link href="http://tphuang.github.io/2014/09/21/Spring-MVC-Hiberante-set-up/"/>
    <id>http://tphuang.github.io/2014/09/21/Spring-MVC-Hiberante-set-up/</id>
    <published>2014-09-21T11:02:39.000Z</published>
    <updated>2015-02-05T04:46:33.000Z</updated>
    <content type="html"><![CDATA[<p>最近学习了<a href="http://hibernate.org/" target="_blank" rel="external">Hibernate</a>，并将Hibernate集成到Spring MVC之中，并替换原有的JDBC，遇到了很多问题，在此记录一下。</p>
<h2 id="添加相应的架包">添加相应的架包</h2>
<p>我的项目是采用Gradle进行管理的，具体架包主要应包括:</p>
<ol>
<li>org.springframework:spring-orm:4.0.6.RELEASE  &nbsp;&nbsp;<em>#主要包含LocalSessionFactoryBean，用于产生sessionFactory</em></li>
<li>org.springframework:spring-test:4.0.0.RELEASE &nbsp;&nbsp;<em>#主要在测试中能配置ContextConfiguration的入口文件</em></li>
<li>org.hibernate:hibernate-core:4.3.6.Final  &nbsp;&nbsp;<em>#主要包含了Hibernate核心类库</em></li>
<li>org.hibernate:hibernate-annotations:3.5.6-Final &nbsp;&nbsp;<em>#主要包含了Hibernate注解类库</em></li>
<li>org.hibernate:hibernate-c3p0:4.3.6.Final &nbsp;&nbsp;<em>#主要包含数据库连接池的类库</em></li>
<li>org.slf4j:slf4j-api:1.7.5 &nbsp;&nbsp;<em>#主要打印输出日志服务，我当时以为没用，没添加它，就一直报slf4j的架包错误</em></li>
</ol>
<h2 id="配置Hibernate相关的XML配置文件">配置Hibernate相关的XML配置文件</h2>
<h3 id="配置database-properties">配置database.properties</h3>
<p>这里主要配置数据库连接池的参数，其中数据库我配有两个，一个用于开发，一个用于测试的。具体配置如下:</p>
<figure class="highlight properties"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">hibernate.<span class="variable">dialect=</span>org.hibernate.dialect.MySQLDialect</div><div class="line"><span class="variable">driverClassName=</span>com.mysql.jdbc.Driver</div><div class="line"><span class="variable">validationQuery=</span>SELECT <span class="number">1</span></div><div class="line"><span class="variable">url=</span>jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/bookshelf?<span class="variable">useUnicode=</span><span class="constant">true</span>&<span class="variable">characterEncoding=</span>UTF-<span class="number">8</span></div><div class="line"><span class="variable">url_test=</span>jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/bookshelf_test?<span class="variable">useUnicode=</span><span class="constant">true</span>&<span class="variable">characterEncoding=</span>UTF-<span class="number">8</span></div><div class="line"><span class="variable">username=</span>root</div><div class="line"><span class="variable">password=</span></div><div class="line">hibernate.hbm2ddl.<span class="variable">auto=</span>update</div><div class="line">hibernate.<span class="variable">show_sql=</span><span class="constant">true</span></div><div class="line">hibernate.<span class="variable">format_sql=</span><span class="constant">true</span></div></pre></td></tr></table></figure>

<p>其中hibernate.hbm2ddl.auto=update配置，如果代码Object属性，类型和长度等有更新，执行过程中，数据库会对应自动更新，这样就不用再去更改对应数据表了。</p>
<h3 id="配置Hibernate-config-xml">配置Hibernate-config.xml</h3>
<p>主要配置dataSource、sessionFactory、txManager，还有自动扫描、注解配置等。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.thoughtworks.bookshelf"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:database.properties"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line">      <span class="attribute">destroy-method</span>=<span class="value">"close"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span> <span class="attribute">value</span>=<span class="value">"${driverClassName}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span> <span class="attribute">value</span>=<span class="value">"${url_test}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">value</span>=<span class="value">"${username}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${password}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span> <span class="attribute">value</span>=<span class="value">"40"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minPoolSize"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialPoolSize"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxIdleTime"</span> <span class="attribute">value</span>=<span class="value">"20"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"hibernateProperties"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.hbm2ddl.auto"</span>&gt;</span>${hibernate.hbm2ddl.auto}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.dialect"</span>&gt;</span>${hibernate.dialect}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.show_sql"</span>&gt;</span>${hibernate.show_sql}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.format_sql"</span>&gt;</span>${hibernate.format_sql}<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 注解方式配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"packagesToScan"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>com.thoughtworks.bookshelf.model<span class="tag">&lt;/<span class="title">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">name</span>=<span class="value">"txManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">tx:annotation-driven</span> <span class="attribute">transaction-manager</span>=<span class="value">"txManager"</span>/&gt;</span></div></pre></td></tr></table></figure>

<p>其中注意</p>
<ol>
<li><code>&lt;context:component-scan base-package=&quot;com.thoughtworks.bookshelf&quot;/&gt;
 &lt;context:annotation-config/&gt;</code>不可缺少，这个是扫描注解的。</li>
<li><code>&lt;property name=&quot;packagesToScan&quot;&gt;&lt;/property&gt;</code>中间应是包名，我当时写成了<code>com.thoughtworks.bookshelf.model.*</code>就报找不到对应实体的错误。</li>
<li>该配置文件，对于Web app应该是在配置Spring MVC的配置文件中导入，否则会找不到Bean，无法加载sessionFactory，dataSource等，具体如<code>&lt;import resource=&quot;hibernate-config.xml&quot;&gt;&lt;/import&gt;</code>,等类似的代码； 如果是Junit测试，应该在测试文件上头配置<code>@ContextConfiguration(locations = {&quot;classpath:hibernate-test.xml&quot;})</code>, 具体参见<strong>第五部分</strong>。因此最好这个配置文件一式两份，一个配置的是开发的数据库，和Spring MVC配置文件在一起，另一个配置测试数据库，放在Source目录下。</li>
</ol>
<h2 id="修改实体类">修改实体类</h2>
<p>这里主要有@Entity @Table @Id @GeneratedValue @Column等注解。其中Obeject上的注解@Table是与数据库中的某表对应的，默认名字相同，如果不同则要在注明，如<code>@Table(name = &quot;book&quot;)</code>; 属性上的注解@Column是于表中的字段对应，同理，如果名字不同则要<code>@Column(name = &quot;title&quot;, length = 200)</code>; @Id是指主键; @GeneratedValue是指该字段自动增长。</p>
<p>部分代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Entity</span></div><div class="line"><span class="annotation">@Table</span>(name = <span class="string">"book"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</div><div class="line">    <span class="annotation">@Id</span></div><div class="line">    <span class="annotation">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="annotation">@Column</span>(name = <span class="string">"title"</span>, length = <span class="number">200</span>)</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="annotation">@Column</span>(name = <span class="string">"author"</span>, length = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String author;</div><div class="line">    #getter or setter方法……</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="修改Dao文件">修改Dao文件</h2>
<p>部分代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Component</span></div><div class="line"><span class="annotation">@Transactional</span>  &nbsp;&nbsp;*#Spring事务管理，不必手动打开session，关闭session*</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>{</div><div class="line">   	<span class="annotation">@Autowired</span> &nbsp;&nbsp;*#自动加载sessionFactory bean，不必手动实例化*</div><div class="line">   	<span class="keyword">private</span> SessionFactory sessionFactory;</div><div class="line">   	<span class="keyword">private</span> Session session;</div><div class="line"></div><div class="line">   	<span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBooks</span>(){</div><div class="line">       	session = sessionFactory.getCurrentSession();</div><div class="line">       	List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</div><div class="line">       	books = session.createCriteria(Book.class).list();</div><div class="line">       	<span class="keyword">return</span> books;</div><div class="line">   	}</div><div class="line">   	<span class="keyword">public</span> Book <span class="title">findBookById</span>(<span class="keyword">int</span> id){</div><div class="line">      		session = sessionFactory.getCurrentSession();</div><div class="line">       	<span class="keyword">return</span> (Book) session.get(Book.class, id);</div><div class="line">   	}</div><div class="line">   }</div></pre></td></tr></table></figure>

<h2 id="修改Dao的测试文件">修改Dao的测试文件</h2>
<p>Junit测试需要配置Hibernate配置文件入口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@RunWith</span>(SpringJUnit4ClassRunner.class)  &nbsp;&nbsp;*#用RunWith注解改变JUnit的默认执行类*</div><div class="line"><span class="annotation">@ContextConfiguration</span>(locations = {<span class="string">"classpath:hibernate-test.xml"</span>}) &nbsp;&nbsp;*#配置在source下的Hibernate测试配置文件*</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoTest</span> </span>{</div><div class="line">    <span class="annotation">@Autowired</span></div><div class="line">    <span class="keyword">private</span> BookDao bookDao;</div><div class="line"></div><div class="line">    <span class="annotation">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFindAllBooks</span>() <span class="keyword">throws</span> Exception {</div><div class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</div><div class="line">        books = (List&lt;Book&gt;) bookDao.findAllBooks();</div><div class="line">        assertNotNull(books);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="与原生JDBC比较">与原生JDBC比较</h2>
<p>这里还没有涉及到复杂的表之间的关联，和自己写HQL语句，只是Hibernate入门和基本配置。</p>
<p>目前最直观的体现如下:</p>
<ol>
<li>Hibernate封装了基本的CRUD的方法，开发效率大大提高。</li>
<li>Hibernate提供数据库事务管理，因此我们不必对手动关闭和释放数据库连接资源。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近学习了<a href="http://hibernate.org/" target="_blank" rel="external">Hibernate</a>，并将Hibernate集成到Spring MVC之中，并替换原有的JDBC，遇到了很多问题，在此记录一下。</]]>
    </summary>
    
      <category term="Hibernate" scheme="http://tphuang.github.io/tags/Hibernate/"/>
    
      <category term="Spring" scheme="http://tphuang.github.io/tags/Spring/"/>
    
      <category term="ORM" scheme="http://tphuang.github.io/tags/ORM/"/>
    
      <category term="Java" scheme="http://tphuang.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[终于有了个自建的博客了]]></title>
    <link href="http://tphuang.github.io/2014/09/21/my-first-blog-build-by-myslef/"/>
    <id>http://tphuang.github.io/2014/09/21/my-first-blog-build-by-myslef/</id>
    <published>2014-09-21T07:11:15.000Z</published>
    <updated>2015-02-05T04:40:46.000Z</updated>
    <content type="html"><![CDATA[<p>终于有了一个自建的博客，在此留下足迹，以作纪念。</p>
<p>这儿要感谢我的同事<a href="http://toozhao.com/" title="峻伟博客" target="_blank" rel="external">峻伟</a>，是他让我知道了<strong><em>Hexo</em></strong>的存在，也是他的督促让我有了这个博客的诞生；同时还要感谢<a href="http://zipperary.com/categories/hexo/" title="Zipper博客" target="_blank" rel="external">Zipper</a>, 虽然不认识他，但他的关于Hexo系列博客帮助我一步步搭建起了该博客。<br></p>
<p>仔细看了下俊伟的博客，居然有2006年的博客，天啦，他高一就开始写博客了，细细想来那会儿我刚接触网络，还是从申请QQ开始的，那会儿就会聊QQ，简单的看看网页。我算了算他的年龄，好像比我还小哎，哎呀真不敢比啊。Anyway，他就是我的目标啦，现目前我有三件大事：学技术、练英语、写博客。</p>
<p>再次说一下为什么要写博客，博客能给我带来什么，套用我的同事<a href="http://www.phodal.com/blog/write-driven-learning/" target="_blank" rel="external">峰达</a>的话，写作驱动学习啦。坚持写博客，我觉得有以下一些好处：</p>
<ol>
<li>一种很好的方式去总结自己的工作和学习。</li>
<li>促进自己更好的学习、思考、写作。</li>
<li>分享自己的知识和经验，获得更多成就感。</li>
<li>一个可以记录自己成长和进步的平台。</li>
<li>可以认识更多的人，也可以被发掘。</li>
</ol>
<p>希望这个博客能记录我成长的点滴，同时能让我对我的工作和学习做一些比较好的总结，以促进我的思考和写作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>终于有了一个自建的博客，在此留下足迹，以作纪念。</p>
<p>这儿要感谢我的同事<a href="http://toozhao.com/" title="峻伟博客" target="_blank" rel="external">峻伟</a>，是他让我知道了<strong>]]>
    </summary>
    
      <category term="Hexo" scheme="http://tphuang.github.io/tags/Hexo/"/>
    
      <category term="随笔生活" scheme="http://tphuang.github.io/categories/%E9%9A%8F%E7%AC%94%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[九月第2周工作学习总结]]></title>
    <link href="http://tphuang.github.io/2014/09/21/summary-for-work-and-study-in-September/"/>
    <id>http://tphuang.github.io/2014/09/21/summary-for-work-and-study-in-September/</id>
    <published>2014-09-21T05:04:47.000Z</published>
    <updated>2015-02-05T04:35:02.000Z</updated>
    <content type="html"><![CDATA[<p>一直很佩服坚持写博客，坚持做一件事的人，发现自己现在真的越来越缺乏耐心了，很多时候都比较急功近利。</p>
<p>写博客在我看来，现目前主要功用是一段时间学习的总结和整理，同时也是自己一点点进步的最好凭证。这种输出方式，可以更好地驱动自己定期整理和总结所思所学，同时这些记录下来的点滴和进步也会让自己产生成就感，驱动自己更多学习和更大进步。</p>
<p>大多时候喜欢将感兴趣和重要的东西放在有道笔记中，觉得这种方式更随意些，但就是缺乏阶段性的总结和整理，使得笔记有些乱了。所以这个博客就暂时定为每周一次，作为一周学习、工作的整理吧。</p>
<h2 id="工作上">工作上</h2>
<p>本周工作了四天，很快从中秋假期中调整了过来，很不错哟。前两天又是充满了各种会议，后两天被网络问题折磨。主要做了两件事，</p>
<p>一是, review了上周未完成的story（QSP Offer — purchase）的代码。Joyce和Nelson继续了后续的Sunpay部分free offer的显示。其中他们重构了我之前写的条件判断的代码，直接用else if搞定了，当时感觉他们错了，但测试又是对的。于是自己写了个成绩评判的小例子，终于真正弄明白了else if，然后就是醍醐灌顶，豁然开朗，看来我的Java基础啊。星期二还准备和峻伟pair cucumber的，于是自己看了Motor代码库的cucumber功能测试，请教了志恒，明白了如何跑该测试。不过下午开Tech Hudddle的时候，Nelson分配了任务，准备和Joyce pair 新卡。</p>
<p>二是, 和Nelson pair完成了QSP Offer — retrieve的Story，星期三上午开始分析，思考实现，下午和Nelson pair；星期四上午各种测试，发现Niche中的CampaignCd不能更改，于是下午继续和Nelson pair，因为 I4 Niche有问题，切换到了 S4 环境下完成功能。晚上又是各种测试没发现什么问题；星期五 I4 Niche好了，然后就在I4环境下测试，接着发现在retrieve old quote时候还有问题，于是debug，终于在中午找到了原因。星期三分析Story的时候，主要参考了Telematics的实现，刚开始还是比较迷糊，在峻伟的帮助下，细分了Task，就清晰了很多。下午和Nelson pair的时候大部分都听懂他说什么，也更有自信了，可是星期二开Tech Huddle的时候，就只是听到了些关键字，很多信息又missing了，幸亏峻伟下来跟我又确认了下。仔细想来Tech Huddle过程中刚开始还好，时间长了，信息量多了就累了，特别是中午想瞌睡；更重要的是有些时候我不知道会议上下文，比如当时讨论杰哥的Forty那个story时候，因为之前没有了解，就不知道他们在说什么，只是零星的关键字，而pair的时候，话题主要针对已经熟悉的story，还有就是Java和IDE的一些术语，所以大部分都听得懂。不管怎么样，说也好，听也罢，目前为止，最为有效的方法是提前做好准备，这样就能增强自信，知道讨论的内容，减少会议中反应和思考时间，从而不至于丢失信息。下午和Nelson pair的时候，还是有些担心的，虽然是第二次和Nelson pair了，但第一次主要是重构我自己做的东西，自己很熟悉，相对来说简单很多。这次幸亏提前和峻伟细分了task，而且参考了Telematics的实现，做了些工作。最后要约好第二天pair时间时候，有点急，脱口就说 “Maybe，我看”，惹得大家哄堂大笑，囧啊。峻伟还给了feedback，注意语气，比如用Could you give me the control?  而不是You can give me the control。第二天8：20没有赶到，很惭愧，以后要注意时间啊。晚上又做了些测试工作，发了封邮件将pair结束后自己额外做了的工作可见，并告知大家，得到了峻伟的表扬，很高兴，加油。星期五早上还跟Victor、Christian讨论了是否将story移到当前迭代中，是否做Shoulder Check问题。从做这个story过程中，学到了很多，最主要的是增强了自信和做一个story的大致流程。其实想来我们的story真的不难，做好分析，拆解好任务，参考类似功能基本就可以搞定的。</p>
<h2 id="学习上">学习上</h2>
<p>本周主要是实现了maven管理cucumber和用原生JDBC实现图书的CRUD功能。图书CRUD功能很简单，做了两天，当然那两天主要是集中于做stroy和它的测试了，晚上回去得晚。maven管理cucumber遇到了好多问题，首先是要将项目由gradle迁移到maven，必须添加想关依赖，遇到了很多问题，其中httpclient这个依赖总有错，折腾了很久才找到它，删了就好了。然后是cucumber中webDriver的依赖在maven中已加入，但架包始终无法导入，最终用gradle解决了这个问题。往往我做了很多工作，但最后就差一步，或许是小小的细节，比如测试中方法调错了，input类型button和submit不分，cucumber中没有验证最后结果，最后结果就大打折扣了。峻伟告诉我，不要自己死钻牛角尖，要学会思考，然后有目的的谷歌搜索，解决问题；同时要反思自己为什么总是卡在一些小问题上，我想主要是细心吧。</p>
<p>星期四的郑大晔校，柯翔主要结合项目谈测试工作，带着我们思考从哪些角度去做测试。测试不仅仅是检验功能是否满足AC，更重要的是跳出AC，发现其他潜在的问题和风险。</p>
<p>和勋荣过继承问题的时候，被他和凡鹏善于思考的习惯和品质震撼。一个功能，他们就能从不同角度，用不同实现去完成，并思考它们的实际使用价值。还有就是凡鹏的编程风格和代码规范真的做得很棒，很受启发。这种比较式的学习，的确能从别的小伙伴身上学到很多，有了对比，才能发现问题。</p>
<p>记得周四的时候，杰哥问了我郑大晔校的课程有什么问题没，啊，我好像好久没有问杰哥作业问题了。我和峻伟交流得到很多，但还要更主动些，特别是要充分利用身边的资源，如杰哥，志恒，勋荣。脸皮要厚，要问，还要有质量地问啊。</p>
<h2 id="总结">总结</h2>
<p>总之，这周感觉还不错的，慢慢地工作能独立完成了，技术也有了进步，也越来越有信心了。加油，不要辜负了峻伟的期望，还有就是要多总结，多思考，列好计划，注意时间管理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直很佩服坚持写博客，坚持做一件事的人，发现自己现在真的越来越缺乏耐心了，很多时候都比较急功近利。</p>
<p>写博客在我看来，现目前主要功用是一段时间学习的总结和整理，同时也是自己一点点进步的最好凭证。这种输出方式，可以更好地驱动自己定期整理和总结所思所学，同时这些记录]]>
    </summary>
    
      <category term="工作总结" scheme="http://tphuang.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
      <category term="ThoughtWorks" scheme="http://tphuang.github.io/tags/ThoughtWorks/"/>
    
      <category term="职业生涯" scheme="http://tphuang.github.io/categories/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
</feed>
